{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.anchorRef = anchorRef;\nexports.bindContextMenu = bindContextMenu;\nexports.bindDialog = bindDialog;\nexports.bindDoubleClick = bindDoubleClick;\nexports.bindFocus = bindFocus;\nexports.bindHover = bindHover;\nexports.bindMenu = bindMenu;\nexports.bindPopover = bindPopover;\nexports.bindPopper = bindPopper;\nexports.bindToggle = bindToggle;\nexports.bindTrigger = bindTrigger;\nexports.createPopupState = createPopupState;\nexports.initCoreState = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n/* eslint-env browser */\nconst printedWarnings = {};\nfunction warn(key, message) {\n  if (printedWarnings[key]) return;\n  printedWarnings[key] = true;\n  console.error('[material-ui-popup-state] WARNING', message); // eslint-disable-line no-console\n}\n\nconst initCoreState = {\n  isOpen: false,\n  setAnchorElUsed: false,\n  anchorEl: null,\n  anchorPosition: undefined,\n  hovered: false,\n  focused: false,\n  _openEventType: null,\n  _childPopupState: null,\n  _deferNextOpen: false,\n  _deferNextClose: false\n};\nexports.initCoreState = initCoreState;\nfunction createPopupState(_ref) {\n  let {\n    state,\n    setState: _setState,\n    parentPopupState,\n    popupId,\n    variant,\n    disableAutoFocus\n  } = _ref;\n  const {\n    isOpen,\n    setAnchorElUsed,\n    anchorEl,\n    anchorPosition,\n    hovered,\n    focused,\n    _openEventType,\n    _childPopupState,\n    _deferNextOpen,\n    _deferNextClose\n  } = state; // use lastState to workaround cases where setState is called multiple times\n  // in a single render (e.g. because of refs being called multiple times)\n\n  let lastState = state;\n  const setState = nextState => {\n    if (hasChanges(lastState, nextState)) {\n      _setState(lastState = {\n        ...lastState,\n        ...nextState\n      });\n    }\n  };\n  const setAnchorEl = _anchorEl => {\n    setState({\n      setAnchorElUsed: true,\n      anchorEl: _anchorEl\n    });\n  };\n  const toggle = eventOrAnchorEl => {\n    if (isOpen) close(eventOrAnchorEl);else open(eventOrAnchorEl);\n  };\n  const open = eventOrAnchorEl => {\n    const eventType = eventOrAnchorEl && eventOrAnchorEl.type;\n    const currentTarget = eventOrAnchorEl && eventOrAnchorEl.currentTarget;\n    const clientX = eventOrAnchorEl && eventOrAnchorEl.clientX;\n    const clientY = eventOrAnchorEl && eventOrAnchorEl.clientY;\n    const anchorPosition = typeof clientX === 'number' && typeof clientY === 'number' ? {\n      left: clientX,\n      top: clientY\n    } : undefined;\n    if (eventType === 'touchstart') {\n      setState({\n        _deferNextOpen: true\n      });\n      return;\n    }\n    const doOpen = () => {\n      if (!eventOrAnchorEl && !setAnchorElUsed) {\n        warn('missingEventOrAnchorEl', 'eventOrAnchorEl should be defined if setAnchorEl is not used');\n      }\n      if (parentPopupState) {\n        if (!parentPopupState.isOpen) return;\n        parentPopupState._setChildPopupState(popupState);\n      }\n      const newState = {\n        isOpen: true,\n        anchorPosition,\n        hovered: eventType === 'mouseover' || hovered,\n        focused: eventType === 'focus' || focused,\n        _openEventType: eventType\n      };\n      if (currentTarget) {\n        if (!setAnchorElUsed) {\n          newState.anchorEl = currentTarget;\n        }\n      } else if (eventOrAnchorEl) {\n        newState.anchorEl = eventOrAnchorEl;\n      }\n      setState(newState);\n    };\n    if (_deferNextOpen) {\n      setState({\n        _deferNextOpen: false\n      });\n      setTimeout(doOpen, 0);\n    } else {\n      doOpen();\n    }\n  };\n  const close = arg => {\n    const eventType = arg && arg.type;\n    switch (eventType) {\n      case 'touchstart':\n        setState({\n          _deferNextClose: true\n        });\n        return;\n    }\n    const doClose = () => {\n      if (_childPopupState) _childPopupState.close();\n      if (parentPopupState) parentPopupState._setChildPopupState(null);\n      setState({\n        isOpen: false,\n        hovered: false,\n        focused: false\n      });\n    };\n    if (_deferNextClose) {\n      setState({\n        _deferNextClose: false\n      });\n      setTimeout(doClose, 0);\n    } else {\n      doClose();\n    }\n  };\n  const setOpen = (nextOpen, eventOrAnchorEl) => {\n    if (nextOpen) {\n      open(eventOrAnchorEl);\n    } else close(eventOrAnchorEl);\n  };\n  const onMouseLeave = event => {\n    const relatedTarget = event.relatedTarget;\n    if (hovered && !isElementInPopup(relatedTarget, popupState)) {\n      if (focused) {\n        setState({\n          hovered: false\n        });\n      } else {\n        close(event);\n      }\n    }\n  };\n  const onBlur = event => {\n    const relatedTarget = event.relatedTarget;\n    if (focused && !isElementInPopup(relatedTarget, popupState)) {\n      if (hovered) {\n        setState({\n          focused: false\n        });\n      } else {\n        close(event);\n      }\n    }\n  };\n  const _setChildPopupState = _childPopupState => setState({\n    _childPopupState\n  });\n  const popupState = {\n    anchorEl,\n    anchorPosition,\n    setAnchorEl,\n    setAnchorElUsed,\n    popupId,\n    variant,\n    isOpen,\n    open,\n    close,\n    toggle,\n    setOpen,\n    onBlur,\n    onMouseLeave,\n    disableAutoFocus: disableAutoFocus !== null && disableAutoFocus !== void 0 ? disableAutoFocus : Boolean(hovered || focused),\n    _openEventType,\n    _childPopupState,\n    _setChildPopupState\n  };\n  return popupState;\n}\n/**\n * Creates a ref that sets the anchorEl for the popup.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction anchorRef(_ref2) {\n  let {\n    setAnchorEl\n  } = _ref2;\n  return el => {\n    if (el) setAnchorEl(el);\n  };\n}\nfunction controlAriaProps(_ref3) {\n  let {\n    isOpen,\n    open,\n    popupId,\n    variant\n  } = _ref3;\n  return {\n    ...(variant === 'popover' ? {\n      'aria-haspopup': true,\n      'aria-controls': isOpen && popupId != null ? popupId : undefined\n    } : variant === 'popper' ? {\n      'aria-describedby': isOpen && popupId != null ? popupId : undefined\n    } : undefined)\n  };\n}\n/**\n * Creates props for a component that opens the popup when clicked.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindTrigger(popupState) {\n  return {\n    ...controlAriaProps(popupState),\n    onClick: popupState.open,\n    onTouchStart: popupState.open\n  };\n}\n/**\n * Creates props for a component that opens the popup on its contextmenu event (right click).\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindContextMenu(popupState) {\n  return {\n    ...controlAriaProps(popupState),\n    onContextMenu: e => {\n      e.preventDefault();\n      popupState.open(e);\n    }\n  };\n}\n/**\n * Creates props for a component that toggles the popup when clicked.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindToggle(popupState) {\n  return {\n    ...controlAriaProps(popupState),\n    onClick: popupState.toggle,\n    onTouchStart: popupState.toggle\n  };\n}\n/**\n * Creates props for a component that opens the popup while hovered.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindHover(popupState) {\n  const {\n    open,\n    onMouseLeave\n  } = popupState;\n  return {\n    ...controlAriaProps(popupState),\n    onTouchStart: open,\n    onMouseOver: open,\n    onMouseLeave\n  };\n}\n/**\n * Creates props for a component that opens the popup while focused.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindFocus(popupState) {\n  const {\n    open,\n    onBlur\n  } = popupState;\n  return {\n    ...controlAriaProps(popupState),\n    onFocus: open,\n    onBlur\n  };\n}\n/**\n * Creates props for a component that opens the popup while double click.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindDoubleClick(_ref4) {\n  let {\n    isOpen,\n    open,\n    popupId,\n    variant\n  } = _ref4;\n  return {\n    // $FlowFixMe\n    [variant === 'popover' ? 'aria-controls' : 'aria-describedby']: isOpen ? popupId : null,\n    'aria-haspopup': variant === 'popover' ? true : undefined,\n    onDoubleClick: open\n  };\n}\n/**\n * Creates props for a `Popover` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindPopover(_ref5) {\n  let {\n    isOpen,\n    anchorEl,\n    anchorPosition,\n    close,\n    popupId,\n    onMouseLeave,\n    disableAutoFocus,\n    _openEventType\n  } = _ref5;\n  const useAnchorPosition = _openEventType === 'contextmenu';\n  return {\n    id: popupId,\n    anchorEl,\n    anchorPosition,\n    anchorReference: useAnchorPosition ? 'anchorPosition' : 'anchorEl',\n    open: isOpen,\n    onClose: close,\n    onMouseLeave,\n    ...(disableAutoFocus && {\n      disableAutoFocus: true,\n      disableEnforceFocus: true,\n      disableRestoreFocus: true\n    })\n  };\n}\n/**\n * Creates props for a `Menu` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\n/**\n * Creates props for a `Popover` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindMenu(_ref6) {\n  let {\n    isOpen,\n    anchorEl,\n    anchorPosition,\n    close,\n    popupId,\n    onMouseLeave,\n    disableAutoFocus,\n    _openEventType\n  } = _ref6;\n  const useAnchorPosition = _openEventType === 'contextmenu';\n  return {\n    id: popupId,\n    anchorEl,\n    anchorPosition,\n    anchorReference: useAnchorPosition ? 'anchorPosition' : 'anchorEl',\n    open: isOpen,\n    onClose: close,\n    onMouseLeave,\n    ...(disableAutoFocus && {\n      autoFocus: false,\n      disableAutoFocusItem: true,\n      disableAutoFocus: true,\n      disableEnforceFocus: true,\n      disableRestoreFocus: true\n    })\n  };\n}\n/**\n * Creates props for a `Popper` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindPopper(_ref7) {\n  let {\n    isOpen,\n    anchorEl,\n    popupId,\n    onMouseLeave\n  } = _ref7;\n  return {\n    id: popupId,\n    anchorEl,\n    open: isOpen,\n    onMouseLeave\n  };\n}\n/**\n * Creates props for a `Dialog` component.\n *\n * @param {object} popupState the argument passed to the child function of\n * `PopupState`\n */\n\nfunction bindDialog(_ref8) {\n  let {\n    isOpen,\n    close\n  } = _ref8;\n  return {\n    open: isOpen,\n    onClose: close\n  };\n}\nfunction getPopup(_ref9) {\n  let {\n    popupId\n  } = _ref9;\n  return popupId && typeof document !== 'undefined' ? document.getElementById(popupId) // eslint-disable-line no-undef\n  : null;\n}\nfunction isElementInPopup(element, popupState) {\n  const {\n    anchorEl,\n    _childPopupState\n  } = popupState;\n  return isAncestor(anchorEl, element) || isAncestor(getPopup(popupState), element) || _childPopupState != null && isElementInPopup(element, _childPopupState);\n}\nfunction isAncestor(parent, child) {\n  if (!parent) return false;\n  while (child) {\n    if (child === parent) return true;\n    child = child.parentElement;\n  }\n  return false;\n}\nfunction hasChanges(state, nextState) {\n  for (let key in nextState) {\n    if (Object.prototype.hasOwnProperty.call(state, key) && state[key] !== nextState[key]) {\n      return true;\n    }\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}